{
  "version": 3,
  "sources": ["../../../@/hooks/useSecretKeys.ts"],
  "sourcesContent": ["import { localForageInstance } from \"@/lib/storage\";\nimport { type SecretKeys } from \"@/types/secret\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { v4 } from \"uuid\";\n\nexport const KEYS_QUERY_KEY = \"secretKeys\";\nexport const KEYS_LOCAL_STORAGE_KEY = \"secretKeys\";\nexport const RESOURCES_QUERY_KEY = \"resources\";\nexport const RESOURCES_LOCAL_STORAGE_KEY = \"resources\";\n\nexport function useSecretKeys() {\n  return useQuery({\n    queryKey: [KEYS_QUERY_KEY],\n    queryFn: async () => {\n      const existingKeys = await localForageInstance.getItem<SecretKeys>(\n        KEYS_LOCAL_STORAGE_KEY\n      )\n      if (!existingKeys) {\n        const newKeys: SecretKeys = {\n          id: v4(),\n          body: {}\n        }\n        await localForageInstance.setItem(KEYS_LOCAL_STORAGE_KEY, newKeys);\n        return newKeys;\n      }\n      return existingKeys;\n    },\n  });\n}\n\nexport function useUpsertSecretKey() {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationKey: [\"upsertSecretKey\"],\n    mutationFn: async (newSecretKeys: SecretKeys) => {\n      await localForageInstance.setItem(KEYS_LOCAL_STORAGE_KEY, newSecretKeys);\n      queryClient.setQueryData([KEYS_QUERY_KEY], newSecretKeys);\n    },\n  });\n}\n\nexport function useDeleteSecretKey() {\n  const queryClient = useQueryClient();\n  return useMutation({\n    mutationKey: [\"deleteSecretKey\"],\n    mutationFn: async (key: string) => {\n      const keys = await localForageInstance.getItem<SecretKeys>(KEYS_LOCAL_STORAGE_KEY);\n      if (!keys) return;\n      // delete the key from the body\n      delete keys.body[key];\n      await localForageInstance.setItem(KEYS_LOCAL_STORAGE_KEY, keys);\n      queryClient.setQueryData([KEYS_QUERY_KEY], keys);\n    },\n  });\n}\n\n// export function useCreateResource() {\n//   const queryClient = useQueryClient();\n\n//   return useMutation({\n//     mutationFn: async (newResource: Omit<Resource, \"id\">) => {\n//       const resources =\n//         (await localForageInstance.getItem<Resource[]>(\n//           RESOURCES_LOCAL_STORAGE_KEY\n//         )) ?? [];\n\n//       const resourceWithId: Resource = {\n//         ...newResource,\n//         id: crypto.randomUUID(),\n//       };\n\n//       const updatedResources = [...resources, resourceWithId];\n//       await localForageInstance.setItem(\n//         RESOURCES_LOCAL_STORAGE_KEY,\n//         updatedResources\n//       );\n//       return resourceWithId;\n//     },\n//     onSuccess: () => {\n//       queryClient.invalidateQueries({ queryKey: [RESOURCES_QUERY_KEY] });\n//     },\n//   });\n// }\n"],
  "mappings": ";;;;;;;;;;;AAKO,IAAM,iBAAiB;AACvB,IAAM,yBAAyB;AAI/B,SAAS,gBAAgB;AAC9B,SAAO,SAAS;AAAA,IACd,UAAU,CAAC,cAAc;AAAA,IACzB,SAAS,YAAY;AACnB,YAAM,eAAe,MAAM,oBAAoB;AAAA,QAC7C;AAAA,MACF;AACA,UAAI,CAAC,cAAc;AACjB,cAAM,UAAsB;AAAA,UAC1B,IAAI,WAAG;AAAA,UACP,MAAM,CAAC;AAAA,QACT;AACA,cAAM,oBAAoB,QAAQ,wBAAwB,OAAO;AACjE,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AACH;AAEO,SAAS,qBAAqB;AACnC,QAAM,cAAc,eAAe;AACnC,SAAO,YAAY;AAAA,IACjB,aAAa,CAAC,iBAAiB;AAAA,IAC/B,YAAY,OAAO,kBAA8B;AAC/C,YAAM,oBAAoB,QAAQ,wBAAwB,aAAa;AACvE,kBAAY,aAAa,CAAC,cAAc,GAAG,aAAa;AAAA,IAC1D;AAAA,EACF,CAAC;AACH;AAEO,SAAS,qBAAqB;AACnC,QAAM,cAAc,eAAe;AACnC,SAAO,YAAY;AAAA,IACjB,aAAa,CAAC,iBAAiB;AAAA,IAC/B,YAAY,OAAO,QAAgB;AACjC,YAAM,OAAO,MAAM,oBAAoB,QAAoB,sBAAsB;AACjF,UAAI,CAAC;AAAM;AAEX,aAAO,KAAK,KAAK,GAAG;AACpB,YAAM,oBAAoB,QAAQ,wBAAwB,IAAI;AAC9D,kBAAY,aAAa,CAAC,cAAc,GAAG,IAAI;AAAA,IACjD;AAAA,EACF,CAAC;AACH;",
  "names": []
}
