{
  "version": 3,
  "sources": ["../../../@/lib/zod.ts", "../../../@/types/secret.ts", "../../../@/components/SecretsPage.tsx", "../../../@/components/PasswordInput.tsx", "../../../app/routes/secrets._index.tsx"],
  "sourcesContent": ["import { z } from \"zod\";\n\nexport function generateFormFields(schema: z.ZodObject<any>) {\n  return Object.entries(schema.shape).map(([key, value]) => {\n    let type = \"text\";\n    if (value instanceof z.ZodNumber) type = \"number\";\n    if (value instanceof z.ZodBoolean) type = \"checkbox\";\n    // Add more type checks as needed\n\n    return {\n      name: key,\n      type,\n      label: key.charAt(0).toUpperCase() + key.slice(1),\n      required: !value.isOptional(),\n    };\n  });\n}\n", "// @/types/secret.ts\nimport { z } from \"zod\";\n\n// Centralized list of known secret key names\nexport const SECRET_KEY_NAMES = [\n  \"OPENAI_API_KEY\",\n  \"OPENAI_ORGANIZATION_ID\",\n  \"ANTHROPIC_API_KEY\",\n  \"GEMINI_API_KEY\",\n  \"GROQ_API_KEY\",\n  \"OPENROUTER_API_KEY\",\n  \"TOGETHER_API_KEY\",\n  \"AWS_ACCESS_KEY_ID\",\n  \"AWS_SECRET_ACCESS_KEY\",\n  \"AWS_SESSION_TOKEN\",\n  \"AWS_REGION\",\n  \"AZURE_API_KEY\",\n] as const;\n\n// Zod enum for secret key names\nexport const SecretKeyName = z.enum(SECRET_KEY_NAMES);\n\n// TypeScript type for SecretKeyName\nexport type SecretKeyName = z.infer<typeof SecretKeyName>;\n\n// Define KnownSecretKeysSchema using the centralized SECRET_KEY_NAMES\nexport const KnownSecretKeysSchema = z.object(\n  SECRET_KEY_NAMES.reduce((acc, key) => {\n    acc[key] = z\n      .string()\n      .min(1, { message: `${key} cannot be empty` })\n      .optional();\n    return acc;\n  }, {} as Record<(typeof SECRET_KEY_NAMES)[number], z.ZodOptional<z.ZodString>>)\n);\n\n// Define SecretKeysSchema\nexport const SecretKeysSchema = z.object({\n  id: z.string(), // Unique identifier for the secret keys entry\n  body: KnownSecretKeysSchema.catchall(\n    z.string().min(1, { message: \"Secret key value cannot be empty\" })\n  ),\n});\n\n// TypeScript type for SecretKeys\nexport type SecretKeys = z.infer<typeof SecretKeysSchema>;\n", "import {\n  useDeleteSecretKey,\n  useSecretKeys,\n  useUpsertSecretKey,\n} from \"@/hooks/useSecretKeys\";\nimport { cn } from \"@/lib/utils\";\nimport { generateFormFields } from \"@/lib/zod\";\nimport { KnownSecretKeysSchema } from \"@/types/secret\";\nimport { type FC, useState } from \"react\";\nimport { PasswordInput } from \"./PasswordInput\";\nimport { ClosedNavigation } from \"./SideNavigation\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\n\nexport const SecretsPage: FC = () => {\n  const { data } = useSecretKeys();\n  const upsertSecretKey = useUpsertSecretKey();\n  const deleteSecretKey = useDeleteSecretKey();\n  const [newKey, setNewKey] = useState<string>(\"\");\n  const [newValue, setNewValue] = useState<string>(\"\");\n  const fields = generateFormFields(KnownSecretKeysSchema).sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n  const customFields = Object.keys(data?.body || {}).filter(\n    (key) => !fields.map((field) => field.name).includes(key)\n  );\n  const handleChange = (\n    fieldName: string,\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    if (data === undefined) return;\n    const value = e.target.value;\n    upsertSecretKey.mutate({\n      id: data.id,\n      body: {\n        ...data.body,\n        [fieldName]: value,\n      },\n    });\n  };\n  const handleAdd = async () => {\n    if (data === undefined) return;\n    await upsertSecretKey.mutateAsync({\n      id: data.id,\n      body: {\n        ...data.body,\n        [newKey]: newValue,\n      },\n    });\n    setNewKey(\"\");\n    setNewValue(\"\");\n  };\n  const handleDelete = (field: string) => {\n    if (data === undefined) return;\n    deleteSecretKey.mutate(field);\n  };\n\n  return (\n    <div className=\"flex h-[100dvh] w-full\">\n      <ClosedNavigation />\n      <div className=\"w-full flex justify-center\">\n        <div\n          className={cn(\n            \"max-w-screen-lg\",\n            \"flex-1\",\n            \"p-4\",\n            \"pt-16\",\n            \"md:p-16\",\n            \"gap-4\",\n            \"flex\",\n            \"flex-col\",\n            \"overflow-y-auto\"\n          )}\n        >\n          <div className=\"flex flex-col gap-4\">\n            <h1 className=\"text-2xl\">Secrets</h1>\n            <p className=\"text-sm text-gray-500\">\n              Secrets are values that you use in your functions to access\n              external services. We define a set of standard secrets that are\n              available to all functions. You can also define your own secrets.\n            </p>\n            {fields.map((field) => (\n              <div key={field.name} className=\"grid grid-cols-7 gap-2\">\n                <Input className=\"col-span-3\" value={field.label} disabled />\n                <PasswordInput\n                  rootClassName=\"col-span-3\"\n                  type={\"password\"}\n                  value={data?.body[field.name]}\n                  onChange={(e) => {\n                    handleChange(field.name, e);\n                  }}\n                />\n                <Button\n                  className=\"col-span-1 h-full\"\n                  variant=\"ghost\"\n                  disabled={true}\n                >\n                  Delete\n                </Button>\n              </div>\n            ))}\n            {customFields.map((field) => (\n              <div key={field} className=\"grid grid-cols-7 gap-2\">\n                <Input className=\"col-span-3\" value={field} disabled />\n                <PasswordInput\n                  rootClassName=\"col-span-3\"\n                  type={\"password\"}\n                  value={data?.body[field]}\n                  onChange={(e) => {\n                    handleChange(field, e);\n                  }}\n                />\n                <Button\n                  className=\"col-span-1 h-full\"\n                  variant=\"destructive\"\n                  onClick={() => {\n                    handleDelete(field);\n                  }}\n                >\n                  Delete\n                </Button>\n              </div>\n            ))}\n            <div className=\"grid grid-cols-7 gap-2\">\n              <Input\n                className=\"col-span-3\"\n                placeholder=\"VARIABLE_NAME\"\n                value={newKey}\n                onChange={(e) => setNewKey(e.target.value)}\n              />\n              <PasswordInput\n                rootClassName=\"col-span-3\"\n                type={\"password\"}\n                className=\"col-span-3\"\n                placeholder=\"VALUE\"\n                value={newValue}\n                onChange={(e) => setNewValue(e.target.value)}\n              />\n              <Button\n                className=\"col-span-1 h-full\"\n                variant=\"secondary\"\n                onClick={handleAdd}\n              >\n                Add\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n", "import { cn } from \"@/lib/utils\";\nimport { Eye, EyeOff } from \"lucide-react\";\nimport { type FC, useState } from \"react\";\nimport { Input, type InputProps } from \"./ui/input\";\n\ntype PasswordInputProps = InputProps & {\n  rootClassName?: string;\n};\n\nexport const PasswordInput: FC<PasswordInputProps> = ({\n  rootClassName,\n  className,\n  ...rest\n}) => {\n  const [show, setShow] = useState(false);\n  const type = show ? \"text\" : \"password\";\n  return (\n    <div className={cn(\"relative\", rootClassName)}>\n      <Input type={type} className={cn(\"pr-8\", className)} {...rest} />\n      <button\n        type=\"button\"\n        onClick={() => setShow((prev) => !prev)}\n        className=\"absolute right-0 top-0 transform translate-y-1/2 px-2\"\n      >\n        {show ? <EyeOff size={16} /> : <Eye size={16} />}\n      </button>\n    </div>\n  );\n};\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/secrets._index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/secrets._index.tsx\");\n  import.meta.hot.lastModified = \"1728365768394.5483\";\n}\n// REMIX HMR END\n\nimport { SecretsPage } from \"@/components/SecretsPage\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nexport default function Function() {\n  return <ClientOnly fallback={null}>{() => <SecretsPage />}</ClientOnly>;\n}\n_c = Function;\nvar _c;\n$RefreshReg$(_c, \"Function\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "import_jsx_dev_runtime"]
}
