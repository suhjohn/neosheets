openapi: 3.0.0
info:
  title: Groq API
  version: 1.0.0
  description: API for interacting with Groq's language models and audio transcription/translation services

servers:
  - url: https://api.groq.com/openai/v1

paths:
  /chat/completions:
    post:
      summary: Create chat completion
      description: Creates a model response for the given chat conversation.
      operationId: createChatCompletion
      tags:
        - Chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCompletionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionResponse'
              
  /audio/transcriptions:
    post:
      summary: Create transcription
      description: Transcribes audio into the input language.
      operationId: createTranscription
      tags:
        - Audio
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TranscriptionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranscriptionResponse'

  /audio/translations:
    post:
      summary: Create translation
      description: Translates audio into English.
      operationId: createTranslation
      tags:
        - Audio
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TranslationRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'

  /models:
    get:
      summary: List models
      description: List available models
      operationId: listModels
      tags:
        - Models
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'

  /models/{model}:
    get:
      summary: Retrieve model
      description: Get details of a specific model
      operationId: retrieveModel
      tags:
        - Models
      parameters:
        - name: model
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'

components:
  schemas:
    ChatCompletionRequest:
      type: object
      required:
        - messages
        - model
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        model:
          type: string
        frequency_penalty:
          type: number
          nullable: true
          default: 0
        function_call:
          oneOf:
            - type: string
            - type: object
          nullable: true
        functions:
          type: array
          items:
            type: object
          nullable: true
        logit_bias:
          type: object
          nullable: true
        max_tokens:
          type: integer
          nullable: true
        n:
          type: integer
          nullable: true
          default: 1
        presence_penalty:
          type: number
          nullable: true
          default: 0
        stop:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          nullable: true
        stream:
          type: boolean
          nullable: true
          default: false
        temperature:
          type: number
          nullable: true
          default: 1
        top_p:
          type: number
          nullable: true
          default: 1
        user:
          type: string
          nullable: true

    ChatMessage:
      type: object
      required:
        - role
        - content
      properties:
        role:
          type: string
          enum: [system, user, assistant]
        content:
          type: string

    ChatCompletionResponse:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        model:
          type: string
        choices:
          type: array
          items:
            $ref: '#/components/schemas/ChatCompletionChoice'
        usage:
          $ref: '#/components/schemas/Usage'

    ChatCompletionChoice:
      type: object
      properties:
        index:
          type: integer
        message:
          $ref: '#/components/schemas/ChatMessage'
        finish_reason:
          type: string

    Usage:
      type: object
      properties:
        prompt_tokens:
          type: integer
        completion_tokens:
          type: integer
        total_tokens:
          type: integer

    TranscriptionRequest:
      type: object
      required:
        - file
        - model
      properties:
        file:
          type: string
          format: binary
        model:
          type: string
        language:
          type: string
        prompt:
          type: string
        response_format:
          type: string
          enum: [json, text, verbose_json]
          default: json
        temperature:
          type: number
          default: 0

    TranscriptionResponse:
      type: object
      properties:
        text:
          type: string

    TranslationRequest:
      type: object
      required:
        - file
        - model
      properties:
        file:
          type: string
          format: binary
        model:
          type: string
        prompt:
          type: string
        response_format:
          type: string
          enum: [json, text, verbose_json]
          default: json
        temperature:
          type: number
          default: 0

    TranslationResponse:
      type: object
      properties:
        text:
          type: string

    ModelList:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'

    Model:
      type: object
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        owned_by:
          type: string
        active:
          type: boolean
        context_window:
          type: integer